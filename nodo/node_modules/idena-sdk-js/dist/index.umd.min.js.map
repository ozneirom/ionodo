{"version":3,"file":"index.umd.min.js","sources":["../src/models/proto/models.ts","../src/utils.ts","../src/models/transactions/attachments/contracts/types.ts","../src/models/transactions/transaction.ts","../src/models/transactions/attachments/contracts/utils.ts","../src/crypto.ts","../src/models/transactions/attachments/storeToIpfsAttachment.ts","../src/providers/utils.ts","../src/providers/provider.ts","../src/providers/bcnProvider.ts","../src/providers/contractProvider.ts","../src/providers/dnaProvider.ts","../src/providers/idenaProvider.ts","../src/models/transactions/attachments/contracts/callContractAttachment.ts","../src/models/transactions/attachments/contracts/deployContractAttachment.ts","../src/models/json/index.ts","../src/models/transactions/attachments/contracts/terminateContractAttachment.ts"],"sourcesContent":["/* eslint-disable */\nimport Long from 'long';\nimport _m0 from 'protobufjs/minimal';\n\nexport const protobufPackage = 'models';\n\nexport interface ProtoTransaction {\n  data: ProtoTransaction_Data | undefined;\n  signature: Uint8Array;\n  useRlp: boolean;\n}\n\nexport interface ProtoTransaction_Data {\n  nonce: number;\n  epoch: number;\n  type: number;\n  to: Uint8Array;\n  amount: Uint8Array;\n  maxFee: Uint8Array;\n  tips: Uint8Array;\n  payload: Uint8Array;\n}\n\nexport interface ProtoDeployContractAttachment {\n  CodeHash: Uint8Array;\n  args: Uint8Array[];\n}\n\nexport interface ProtoCallContractAttachment {\n  method: string;\n  args: Uint8Array[];\n}\n\nexport interface ProtoTerminateContractAttachment {\n  args: Uint8Array[];\n}\n\nexport interface ProtoStoreToIpfsAttachment {\n  cid: Uint8Array;\n  size: number;\n}\n\nfunction createBaseProtoTransaction(): ProtoTransaction {\n  return { data: undefined, signature: new Uint8Array(), useRlp: false };\n}\n\nexport const ProtoTransaction = {\n  encode(\n    message: ProtoTransaction,\n    writer: _m0.Writer = _m0.Writer.create(),\n  ): _m0.Writer {\n    if (message.data !== undefined) {\n      ProtoTransaction_Data.encode(\n        message.data,\n        writer.uint32(10).fork(),\n      ).ldelim();\n    }\n    if (message.signature.length !== 0) {\n      writer.uint32(18).bytes(message.signature);\n    }\n    if (message.useRlp === true) {\n      writer.uint32(24).bool(message.useRlp);\n    }\n    return writer;\n  },\n\n  decode(input: _m0.Reader | Uint8Array, length?: number): ProtoTransaction {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseProtoTransaction();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.data = ProtoTransaction_Data.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.signature = reader.bytes();\n          break;\n        case 3:\n          message.useRlp = reader.bool();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<ProtoTransaction>, I>>(\n    object: I,\n  ): ProtoTransaction {\n    const message = createBaseProtoTransaction();\n    message.data =\n      object.data !== undefined && object.data !== null\n        ? ProtoTransaction_Data.fromPartial(object.data)\n        : undefined;\n    message.signature = object.signature ?? new Uint8Array();\n    message.useRlp = object.useRlp ?? false;\n    return message;\n  },\n};\n\nfunction createBaseProtoTransaction_Data(): ProtoTransaction_Data {\n  return {\n    nonce: 0,\n    epoch: 0,\n    type: 0,\n    to: new Uint8Array(),\n    amount: new Uint8Array(),\n    maxFee: new Uint8Array(),\n    tips: new Uint8Array(),\n    payload: new Uint8Array(),\n  };\n}\n\nexport const ProtoTransaction_Data = {\n  encode(\n    message: ProtoTransaction_Data,\n    writer: _m0.Writer = _m0.Writer.create(),\n  ): _m0.Writer {\n    if (message.nonce !== 0) {\n      writer.uint32(8).uint32(message.nonce);\n    }\n    if (message.epoch !== 0) {\n      writer.uint32(16).uint32(message.epoch);\n    }\n    if (message.type !== 0) {\n      writer.uint32(24).uint32(message.type);\n    }\n    if (message.to.length !== 0) {\n      writer.uint32(34).bytes(message.to);\n    }\n    if (message.amount.length !== 0) {\n      writer.uint32(42).bytes(message.amount);\n    }\n    if (message.maxFee.length !== 0) {\n      writer.uint32(50).bytes(message.maxFee);\n    }\n    if (message.tips.length !== 0) {\n      writer.uint32(58).bytes(message.tips);\n    }\n    if (message.payload.length !== 0) {\n      writer.uint32(66).bytes(message.payload);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number,\n  ): ProtoTransaction_Data {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseProtoTransaction_Data();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.nonce = reader.uint32();\n          break;\n        case 2:\n          message.epoch = reader.uint32();\n          break;\n        case 3:\n          message.type = reader.uint32();\n          break;\n        case 4:\n          message.to = reader.bytes();\n          break;\n        case 5:\n          message.amount = reader.bytes();\n          break;\n        case 6:\n          message.maxFee = reader.bytes();\n          break;\n        case 7:\n          message.tips = reader.bytes();\n          break;\n        case 8:\n          message.payload = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<ProtoTransaction_Data>, I>>(\n    object: I,\n  ): ProtoTransaction_Data {\n    const message = createBaseProtoTransaction_Data();\n    message.nonce = object.nonce ?? 0;\n    message.epoch = object.epoch ?? 0;\n    message.type = object.type ?? 0;\n    message.to = object.to ?? new Uint8Array();\n    message.amount = object.amount ?? new Uint8Array();\n    message.maxFee = object.maxFee ?? new Uint8Array();\n    message.tips = object.tips ?? new Uint8Array();\n    message.payload = object.payload ?? new Uint8Array();\n    return message;\n  },\n};\n\nfunction createBaseProtoDeployContractAttachment(): ProtoDeployContractAttachment {\n  return { CodeHash: new Uint8Array(), args: [] };\n}\n\nexport const ProtoDeployContractAttachment = {\n  encode(\n    message: ProtoDeployContractAttachment,\n    writer: _m0.Writer = _m0.Writer.create(),\n  ): _m0.Writer {\n    if (message.CodeHash.length !== 0) {\n      writer.uint32(10).bytes(message.CodeHash);\n    }\n    for (const v of message.args) {\n      writer.uint32(18).bytes(v!);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number,\n  ): ProtoDeployContractAttachment {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseProtoDeployContractAttachment();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.CodeHash = reader.bytes();\n          break;\n        case 2:\n          message.args.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<ProtoDeployContractAttachment>, I>>(\n    object: I,\n  ): ProtoDeployContractAttachment {\n    const message = createBaseProtoDeployContractAttachment();\n    message.CodeHash = object.CodeHash ?? new Uint8Array();\n    message.args = object.args?.map((e) => e) || [];\n    return message;\n  },\n};\n\nfunction createBaseProtoCallContractAttachment(): ProtoCallContractAttachment {\n  return { method: '', args: [] };\n}\n\nexport const ProtoCallContractAttachment = {\n  encode(\n    message: ProtoCallContractAttachment,\n    writer: _m0.Writer = _m0.Writer.create(),\n  ): _m0.Writer {\n    if (message.method !== '') {\n      writer.uint32(10).string(message.method);\n    }\n    for (const v of message.args) {\n      writer.uint32(18).bytes(v!);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number,\n  ): ProtoCallContractAttachment {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseProtoCallContractAttachment();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.method = reader.string();\n          break;\n        case 2:\n          message.args.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<ProtoCallContractAttachment>, I>>(\n    object: I,\n  ): ProtoCallContractAttachment {\n    const message = createBaseProtoCallContractAttachment();\n    message.method = object.method ?? '';\n    message.args = object.args?.map((e) => e) || [];\n    return message;\n  },\n};\n\nfunction createBaseProtoTerminateContractAttachment(): ProtoTerminateContractAttachment {\n  return { args: [] };\n}\n\nexport const ProtoTerminateContractAttachment = {\n  encode(\n    message: ProtoTerminateContractAttachment,\n    writer: _m0.Writer = _m0.Writer.create(),\n  ): _m0.Writer {\n    for (const v of message.args) {\n      writer.uint32(10).bytes(v!);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number,\n  ): ProtoTerminateContractAttachment {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseProtoTerminateContractAttachment();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.args.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromPartial<\n    I extends Exact<DeepPartial<ProtoTerminateContractAttachment>, I>,\n  >(object: I): ProtoTerminateContractAttachment {\n    const message = createBaseProtoTerminateContractAttachment();\n    message.args = object.args?.map((e) => e) || [];\n    return message;\n  },\n};\n\nfunction createBaseProtoStoreToIpfsAttachment(): ProtoStoreToIpfsAttachment {\n  return { cid: new Uint8Array(), size: 0 };\n}\n\nexport const ProtoStoreToIpfsAttachment = {\n  encode(\n    message: ProtoStoreToIpfsAttachment,\n    writer: _m0.Writer = _m0.Writer.create(),\n  ): _m0.Writer {\n    if (message.cid.length !== 0) {\n      writer.uint32(10).bytes(message.cid);\n    }\n    if (message.size !== 0) {\n      writer.uint32(16).uint32(message.size);\n    }\n    return writer;\n  },\n\n  decode(\n    input: _m0.Reader | Uint8Array,\n    length?: number,\n  ): ProtoStoreToIpfsAttachment {\n    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseProtoStoreToIpfsAttachment();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.cid = reader.bytes();\n          break;\n        case 2:\n          message.size = reader.uint32();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n\n  fromPartial<I extends Exact<DeepPartial<ProtoStoreToIpfsAttachment>, I>>(\n    object: I,\n  ): ProtoStoreToIpfsAttachment {\n    const message = createBaseProtoStoreToIpfsAttachment();\n    message.cid = object.cid ?? new Uint8Array();\n    message.size = object.size ?? 0;\n    return message;\n  },\n};\n\ntype Builtin =\n  | Date\n  | Function\n  | Uint8Array\n  | string\n  | number\n  | boolean\n  | undefined;\n\nexport type DeepPartial<T> = T extends Builtin\n  ? T\n  : T extends Array<infer U>\n  ? Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U>\n  ? ReadonlyArray<DeepPartial<U>>\n  : T extends {}\n  ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\nexport type Exact<P, I extends P> = P extends Builtin\n  ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<\n        Exclude<keyof I, KeysOfUnion<P>>,\n        never\n      >;\n\nif (_m0.util.Long !== Long) {\n  _m0.util.Long = Long as any;\n  _m0.configure();\n}\n","import BN from 'bn.js';\nimport Decimal from 'decimal.js';\n\nDecimal.set({ toExpPos: 10000 });\n\nexport const DNA_BASE = '1000000000000000000';\n\nfunction isHexPrefixed(str: string): boolean {\n  return str.slice(0, 2) === '0x';\n}\n\nexport function stripHexPrefix(str: string): string {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n\nexport function hexToUint8Array(hexString: string): Uint8Array {\n  const str = stripHexPrefix(hexString);\n\n  const arrayBuffer = new Uint8Array(str.length / 2);\n\n  for (let i = 0; i < str.length; i += 2) {\n    const byteValue = parseInt(str.substring(i, i + 2), 16);\n    arrayBuffer[i / 2] = byteValue;\n  }\n\n  return arrayBuffer;\n}\n\nexport function toHexString(\n  byteArray: Uint8Array | number[],\n  withPrefix = true,\n) {\n  return (\n    (withPrefix ? '0x' : '') +\n    Array.from(byteArray, function (byte) {\n      return `0${(byte & 0xff).toString(16)}`.slice(-2);\n    }).join('')\n  );\n}\n\nexport function floatStringToDna(value: string) {\n  const decimalValue = new Decimal(value).mul(new Decimal(DNA_BASE)).toString();\n  return new BN(decimalValue);\n}\n\nexport function dnaToFloatString(value: BN | string) {\n  const bn = new BN(value);\n  return new Decimal(bn.toString(10)).div(new Decimal(DNA_BASE)).toString();\n}\n\nexport function calculateGasCost(feePerGas: BN | string, gas: number): string {\n  const bn = new BN(feePerGas);\n  return bn.mul(new BN(gas)).toString();\n}\n","export enum EmbeddedContractType {\n  TimeLockContract = 1,\n  OracleVotingContract = 2,\n  OracleLockContract = 3,\n  RefundableOracleLockContract = 4,\n  MultisigContract = 5,\n}\n\nexport enum ContractArgumentFormat {\n  Default = 'default',\n  Byte = 'byte',\n  Int8 = 'int8',\n  Uint64 = 'uint64',\n  Int64 = 'int64',\n  String = 'string',\n  Bigint = 'bigint',\n  Hex = 'hex',\n  Dna = 'dna',\n}\n\nexport interface ContractArgument {\n  index: number;\n  format: ContractArgumentFormat;\n  value: any;\n}\n","import { ProtoTransaction, ProtoTransaction_Data } from '../proto/models';\nimport BN from 'bn.js';\nimport { floatStringToDna, hexToUint8Array, toHexString } from '../../utils';\nimport sha3 from 'js-sha3';\nimport { sender, sign } from '../../crypto';\nimport type { JsonTransaction } from '../json';\nimport { StoreToIpfsAttachment } from './attachments/storeToIpfsAttachment';\n\nexport enum TransactionType {\n  SendTx = 0x0,\n  ActivationTx = 0x1,\n  InviteTx = 0x2,\n  KillTx = 0x3,\n  SubmitFlipTx = 0x4,\n  SubmitAnswersHashTx = 0x5,\n  SubmitShortAnswersTx = 0x6,\n  SubmitLongAnswersTx = 0x7,\n  EvidenceTx = 0x8,\n  OnlineStatusTx = 0x9,\n  KillInviteeTx = 0xa,\n  ChangeGodAddressTx = 0xb,\n  BurnTx = 0xc,\n  ChangeProfileTx = 0xd,\n  DeleteFlipTx = 0xe,\n  DeployContractTx = 0xf,\n  CallContractTx = 0x10,\n  TerminateContractTx = 0x11,\n  DelegateTx = 0x12,\n  UndelegateTx = 0x13,\n  KillDelegatorTx = 0x14,\n  StoreToIpfsTx = 0x15,\n}\n\nexport class Transaction {\n  private _nonce = 0;\n  private _epoch = 0;\n  private _type: TransactionType | number = 0;\n  private _to: Uint8Array | null = null;\n  private _amount: BN | null = null;\n  private _maxFee: BN | null = null;\n  private _tips: BN | null = null;\n  private _payload: Uint8Array | null = null;\n\n  private _signature: Uint8Array | null = null;\n\n  constructor(\n    init?: Partial<{\n      nonce: number;\n      epoch: number;\n      type: TransactionType;\n      to: Uint8Array | string;\n      amount: Uint8Array | string | number | BN;\n      maxFee: Uint8Array | string | number | BN;\n      tips: Uint8Array | string | number | BN;\n      payload: Uint8Array | number[];\n    }>,\n  ) {\n    this.nonce = init?.nonce ?? 0;\n    this.epoch = init?.epoch ?? 0;\n    this.type = init?.type ?? 0;\n    this.to = init?.to ?? null;\n    this.amount = init?.amount ?? null;\n    this.maxFee = init?.maxFee ?? null;\n    this.tips = init?.tips ?? null;\n    this.payload = init?.payload ? new Uint8Array(init.payload) : null;\n  }\n\n  public set nonce(nonce: number) {\n    this._nonce = nonce;\n  }\n\n  public get nonce(): number {\n    return this._nonce;\n  }\n\n  public set epoch(epoch: number) {\n    this._epoch = epoch;\n  }\n\n  public get epoch(): number {\n    return this._epoch;\n  }\n\n  public set type(type: TransactionType) {\n    this._type = type;\n  }\n\n  public get type(): number {\n    return this._type;\n  }\n\n  public set to(to: string | Uint8Array | null) {\n    if (to === null) this._to = null;\n    else if (to instanceof Uint8Array) this._to = to;\n    else this._to = hexToUint8Array(to);\n  }\n\n  public get to(): string | null {\n    return this._to && this._to.length > 0 ? toHexString(this._to, true) : null;\n  }\n\n  public set amount(amount: number | string | BN | Uint8Array | null) {\n    this._amount = amount !== null ? new BN(amount) : null;\n  }\n\n  public get amount(): BN | null {\n    return this._amount;\n  }\n\n  public set maxFee(maxFee: number | string | BN | Uint8Array | null) {\n    this._maxFee = maxFee !== null ? new BN(maxFee) : null;\n  }\n\n  public get maxFee(): BN | null {\n    return this._maxFee;\n  }\n\n  public set tips(tips: number | string | BN | Uint8Array | null) {\n    this._tips = tips !== null ? new BN(tips) : null;\n  }\n\n  public get tips(): BN | null {\n    return this._tips;\n  }\n\n  public set payload(payload: Uint8Array | null) {\n    this._payload = payload;\n  }\n\n  public get payload(): Uint8Array | null {\n    return this._payload ? new Uint8Array(this._payload) : null;\n  }\n\n  public get signature(): Uint8Array | null {\n    return this._signature;\n  }\n\n  get hash() {\n    return Buffer.from(sha3.keccak_256.array(this.toBytes())).toString('hex');\n  }\n\n  get sender() {\n    try {\n      if (!this._signature || this._signature.length === 0) return null;\n\n      const data = ProtoTransaction_Data.encode(\n        this._createProtoTxData(),\n      ).finish();\n\n      return sender(data, this._signature, true);\n    } catch {\n      return null;\n    }\n  }\n\n  get gas() {\n    const bytes = this.toBytes();\n    let size = bytes.length;\n    if (!this._signature || this._signature.length === 0) size += 67;\n    if (this.type === TransactionType.DeleteFlipTx) size += 1024 * 120;\n    if (this.type === TransactionType.StoreToIpfsTx) {\n      const maxSize = 1024 * 1024;\n      try {\n        if (this.payload) {\n          const attachment = new StoreToIpfsAttachment().fromBytes(\n            this.payload,\n          );\n          size += attachment.size * 0.2 || maxSize;\n        } else {\n          size += maxSize;\n        }\n      } catch (e) {\n        size += maxSize;\n      }\n    }\n    return ~~size * 10;\n  }\n\n  static fromHex(hex: string): Transaction {\n    return new Transaction().fromHex(hex);\n  }\n\n  static fromBytes(bytes: Uint8Array): Transaction {\n    return new Transaction().fromBytes(bytes);\n  }\n\n  public fromHex(hex: string): Transaction {\n    return this.fromBytes(hexToUint8Array(hex));\n  }\n\n  public fromBytes(bytes: Uint8Array): Transaction {\n    const protoTx = ProtoTransaction.decode(bytes);\n    const protoTxData = protoTx.data;\n\n    if (protoTxData) {\n      this.nonce = protoTxData.nonce;\n      this.epoch = protoTxData.epoch;\n      this.type = protoTxData.type;\n      this.to = protoTxData.to;\n      this.amount = protoTxData.amount;\n      this.maxFee = protoTxData.maxFee;\n      this.tips = protoTxData.tips;\n      this.payload = protoTxData.payload;\n    }\n\n    this._signature = protoTx.signature;\n\n    return this;\n  }\n\n  public fromJson(jsonTx: JsonTransaction): Transaction {\n    function getTxType(type: string): TransactionType {\n      if (!type?.length) return TransactionType.SendTx;\n      const stringType = type[0]?.toUpperCase() + type.slice(1) + 'Tx';\n      return <TransactionType>(\n        (Object.entries(TransactionType).find(\n          ([key]) => key === stringType,\n        )?.[1] || TransactionType.SendTx)\n      );\n    }\n\n    this.nonce = jsonTx.nonce;\n    this.epoch = jsonTx.epoch;\n    this.type = getTxType(jsonTx.type);\n    this.to = jsonTx.to;\n    this.amount = floatStringToDna(jsonTx.amount);\n    this.maxFee = floatStringToDna(jsonTx.maxFee);\n    this.tips = floatStringToDna(jsonTx.tips);\n    this.payload = hexToUint8Array(jsonTx.payload);\n\n    return this;\n  }\n\n  public toBytes(): Uint8Array {\n    const tx = ProtoTransaction.fromPartial({\n      data: this._createProtoTxData(),\n      signature: this._signature ?? new Uint8Array(),\n    });\n    return ProtoTransaction.encode(tx).finish();\n  }\n\n  public sign(key: string | Uint8Array | number[]): Transaction {\n    const data = ProtoTransaction_Data.encode(\n      this._createProtoTxData(),\n    ).finish();\n    this._signature = sign(data, key);\n    return this;\n  }\n\n  public toHex(withPrefix = true): string {\n    return toHexString(this.toBytes(), withPrefix);\n  }\n\n  private _createProtoTxData(): ProtoTransaction_Data {\n    return ProtoTransaction_Data.fromPartial({\n      epoch: this._epoch,\n      nonce: this._nonce,\n      type: this._type,\n      to: this._to ?? new Uint8Array(),\n      amount: new Uint8Array(\n        !this._amount || this._amount.isZero() ? [] : this._amount.toArray(),\n      ),\n      maxFee: new Uint8Array(\n        !this._maxFee || this._maxFee.isZero() ? [] : this._maxFee.toArray(),\n      ),\n      tips: new Uint8Array(\n        !this._tips || this._tips.isZero() ? [] : this._tips.toArray(),\n      ),\n      payload: this._payload ?? new Uint8Array(),\n    });\n  }\n}\n","import BN from 'bn.js';\nimport Decimal from 'decimal.js';\nimport {\n  dnaToFloatString,\n  floatStringToDna,\n  hexToUint8Array,\n  toHexString,\n} from '../../../../utils';\nimport { ContractArgument, ContractArgumentFormat } from './types';\n\nDecimal.set({ toExpPos: 10000 });\n\nexport function argumentFromBytes(\n  format: ContractArgumentFormat,\n  index: number,\n  bytes: Uint8Array,\n): ContractArgument {\n  if (bytes.length === 0) {\n    return {\n      format,\n      index,\n      value: null,\n    };\n  }\n  switch (format) {\n    case 'byte': {\n      return {\n        format: ContractArgumentFormat.Byte,\n        index: index,\n        value: bytes[0],\n      };\n    }\n    case 'int8': {\n      return {\n        format: ContractArgumentFormat.Int8,\n        index: index,\n        value: bytes[0],\n      };\n    }\n    case 'uint64': {\n      const res = Buffer.from(bytes).readBigUint64LE();\n      return {\n        format: ContractArgumentFormat.Uint64,\n        index: index,\n        value: res.toString(10),\n      };\n    }\n    case 'int64': {\n      const res = Buffer.from(bytes).readBigInt64LE();\n      return {\n        format: ContractArgumentFormat.Int64,\n        index: index,\n        value: res.toString(10),\n      };\n    }\n    case 'string': {\n      const res = utf8ByteArrayToString(bytes);\n      return {\n        format: ContractArgumentFormat.String,\n        index: index,\n        value: res,\n      };\n    }\n    case 'bigint': {\n      const res = new BN(bytes);\n      return {\n        format: ContractArgumentFormat.Bigint,\n        index: index,\n        value: res.toString(10),\n      };\n    }\n    case 'hex': {\n      return {\n        format: ContractArgumentFormat.Hex,\n        index: index,\n        value: toHexString(bytes),\n      };\n    }\n    case 'dna': {\n      const bn = new BN(bytes);\n      return {\n        format: ContractArgumentFormat.Dna,\n        index: index,\n        value: dnaToFloatString(bn),\n      };\n    }\n    default: {\n      return {\n        format: ContractArgumentFormat.Default,\n        index: index,\n        value: toHexString(bytes),\n      };\n    }\n  }\n}\n\nexport function argumentsFromBytes(\n  formats: ContractArgumentFormat[],\n  bytes: Uint8Array[],\n): ContractArgument[] {\n  return formats.map((format, idx) =>\n    argumentFromBytes(format, idx, bytes[idx] || new Uint8Array()),\n  );\n}\n\nexport function argumentToBytes(data: ContractArgument): Uint8Array {\n  try {\n    switch (data.format) {\n      case 'byte': {\n        const val = parseInt(data.value, 10);\n        if (val >= 0 && val <= 255) {\n          return new Uint8Array([val]);\n        }\n        throw new Error('invalid byte value');\n      }\n      case 'int8': {\n        const val = parseInt(data.value, 10);\n        if (val >= 0 && val <= 255) {\n          return new Uint8Array([val]);\n        }\n        throw new Error('invalid int8 value');\n      }\n      case 'uint64': {\n        const res = new BN(data.value);\n        if (res.isNeg()) throw new Error('invalid uint64 value');\n        const buf = Buffer.alloc(8);\n        buf.writeBigUint64LE(BigInt(res.toString()));\n        return new Uint8Array(buf);\n      }\n      case 'int64': {\n        const buf = Buffer.alloc(8);\n        buf.writeBigInt64LE(BigInt(new BN(data.value).toString()));\n        return new Uint8Array(buf);\n      }\n      case 'string': {\n        return stringToUtf8ByteArray(data.value);\n      }\n      case 'bigint': {\n        return new Uint8Array(new BN(data.value).toArray());\n      }\n      case 'hex': {\n        return new Uint8Array([...hexToUint8Array(data.value)]);\n      }\n      case 'dna': {\n        return new Uint8Array(floatStringToDna(data.value).toArray());\n      }\n      default: {\n        return new Uint8Array([...hexToUint8Array(data.value)]);\n      }\n    }\n  } catch (e) {\n    throw new Error(\n      `cannot parse ${data.format} at index ${data.index}: ${\n        (e as Error)?.message\n      }`,\n    );\n  }\n}\n\nexport function argumentsToBytes(args: ContractArgument[]): Uint8Array[] {\n  const maxIndex = Math.max(...args.map((x) => x.index));\n\n  const result: Uint8Array[] = new Array(maxIndex).fill(null);\n\n  args.forEach((element) => {\n    result[element.index] = argumentToBytes(element);\n  });\n\n  return result;\n}\n\n/**\n * Converts a JS string to a UTF-8 \"byte\" array.\n * @param {string} str 16-bit unicode string.\n * @return {!Uint8Array} UTF-8 byte array.\n */\nfunction stringToUtf8ByteArray(str: string): Uint8Array {\n  const out = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) == 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) == 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return new Uint8Array(out);\n}\n\n/**\n * Converts a UTF-8 byte array to JavaScript's 16-bit Unicode.\n * @param {Uint8Array} bytes UTF-8 byte array.\n * @return {string} 16-bit Unicode string.\n */\nfunction utf8ByteArrayToString(bytes: Uint8Array): string {\n  const out = [];\n  let pos = 0;\n  let c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++] || 0;\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++] || 0;\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++] || 0;\n      const c3 = bytes[pos++] || 0;\n      const c4 = bytes[pos++] || 0;\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++] || 0;\n      const c3 = bytes[pos++] || 0;\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63),\n      );\n    }\n  }\n  return out.join('');\n}\n","import sha3 from 'js-sha3';\nimport { hexToUint8Array, toHexString } from './utils';\nimport secp256k1 from 'secp256k1';\n\nfunction getKeyArray(key: Uint8Array | number[] | string): Uint8Array {\n  return typeof key === 'string' ? hexToUint8Array(key) : new Uint8Array(key);\n}\n\nexport function privateKeyToPublicKey(\n  key: Uint8Array | number[] | string,\n  withPrefix = false,\n) {\n  const pubKey = secp256k1.publicKeyCreate(getKeyArray(key), false);\n  return toHexString(pubKey, withPrefix);\n}\n\nexport function publicKeyToAddress(\n  publicKey: Uint8Array | number[] | string,\n  withPrefix = true,\n) {\n  return toHexString(\n    sha3.keccak_256.array(getKeyArray(publicKey).slice(1)).slice(12),\n    withPrefix,\n  );\n}\n\nexport function privateKeyToAddress(\n  key: Uint8Array | number[] | string,\n  withPrefix = true,\n) {\n  if (!key) {\n    return '0x0000000000000000000000000000000000000000';\n  }\n\n  const pubKey = secp256k1.publicKeyCreate(getKeyArray(key), false);\n\n  return publicKeyToAddress(pubKey, withPrefix);\n}\n\nexport function sender(\n  data: Uint8Array | number[],\n  signature: Uint8Array | number[],\n  withPrefix = true,\n) {\n  const hash = sha3.keccak_256.array(data);\n  const pubKey = secp256k1.ecdsaRecover(\n    new Uint8Array(signature).slice(0, -1),\n    Number(signature[signature.length - 1]),\n    new Uint8Array(hash),\n    false,\n  );\n\n  return publicKeyToAddress(pubKey, withPrefix);\n}\n\nexport function sign(\n  data: Uint8Array | number[],\n  key: Uint8Array | number[] | string,\n): Uint8Array {\n  const hash = sha3.keccak_256.array(data);\n  const { signature, recid } = secp256k1.ecdsaSign(\n    new Uint8Array(hash),\n    typeof key === 'string' ? hexToUint8Array(key) : new Uint8Array(key),\n  );\n\n  return new Uint8Array([...signature, recid]);\n}\n","import { ProtoStoreToIpfsAttachment } from '../../proto/models';\nimport type { EmbeddedContractType } from './contracts/types';\n\nexport class StoreToIpfsAttachment {\n  private _size: number;\n  private _cid: Uint8Array;\n\n  constructor(init?: Partial<{ size: EmbeddedContractType; cid: Uint8Array }>) {\n    this._size = init?.size || 0;\n    this._cid = init?.cid || new Uint8Array();\n  }\n\n  public set size(size: number) {\n    this._size = size;\n  }\n\n  public get size(): number {\n    return this._size;\n  }\n\n  public set cid(cid: Uint8Array) {\n    this._cid = cid;\n  }\n\n  public get cid(): Uint8Array {\n    return this._cid;\n  }\n\n  public fromBytes(bytes: Uint8Array) {\n    const protoAttachment = ProtoStoreToIpfsAttachment.decode(bytes);\n\n    this._cid = protoAttachment.cid;\n    this._size = protoAttachment.size;\n\n    return this;\n  }\n\n  public toBytes() {\n    const attachment = ProtoStoreToIpfsAttachment.fromPartial({\n      cid: this._cid,\n      size: this._size,\n    });\n    return ProtoStoreToIpfsAttachment.encode(attachment).finish();\n  }\n}\n","import axios from 'axios';\n\nexport function createAxiosInstance(url: string, apiKey: string) {\n  const res = axios.create({ baseURL: url });\n  res.interceptors.request.use(function (config) {\n    config.data.key = apiKey;\n    return config;\n  });\n  return res;\n}\n","import type { AxiosInstance } from 'axios';\nimport axios from 'axios';\n\nexport class BaseProvider {\n  protected _httpProvider: AxiosInstance;\n\n  constructor(httpProvider: AxiosInstance) {\n    this._httpProvider = httpProvider;\n  }\n\n  public async doRequest(obj: { method: string; params: any; id?: number }) {\n    try {\n      if (!obj.id) obj.id = 1;\n\n      const { data } = await this._httpProvider.post('/', obj);\n\n      const { result, error } = data;\n      if (error) throw new Error(error.message);\n\n      return result;\n    } catch (e) {\n      if (axios.isAxiosError(e)) {\n        if (e.response) {\n          throw new Error(e.response.data as any);\n        } else if (e.request) {\n          throw new Error('node is unavailable');\n        } else throw new Error(e.message);\n      } else {\n        throw e;\n      }\n    }\n  }\n}\n","import { Transaction, TransactionType } from '../models';\nimport type { AxiosInstance } from 'axios';\nimport { createAxiosInstance } from './utils';\nimport { BaseProvider } from './provider';\nimport { toHexString } from '../utils';\nimport type { JsonBlock, JsonTransaction, JsonReceipt } from '../models/json';\n\nexport class BcnProvider extends BaseProvider {\n  static create(url: string, apiKey: string) {\n    return new BcnProvider(createAxiosInstance(url, apiKey));\n  }\n\n  constructor(httpProvider: AxiosInstance) {\n    super(httpProvider);\n  }\n\n  public async buildTx(\n    data: Partial<{\n      from: string;\n      to: string;\n      epoch: number;\n      nonce: number;\n      type: TransactionType;\n      amount: string;\n      maxFee: string;\n      tips: string;\n      payload: number[] | Uint8Array;\n    }>,\n  ): Promise<Transaction> {\n    const params: any = data;\n    if (data.payload) params.payload = toHexString(data.payload);\n    params.useProto = true;\n\n    const result = await this.doRequest({\n      method: 'bcn_getRawTx',\n      params: [params],\n    });\n    return new Transaction().fromHex(result);\n  }\n\n  public async sendTx(tx: Transaction): Promise<string> {\n    const result = await this.doRequest({\n      method: 'bcn_sendRawTx',\n      params: [tx.toHex(true)],\n    });\n\n    return result;\n  }\n\n  public async estimateTx(\n    tx: Transaction,\n  ): Promise<{ receipt: JsonReceipt; txHash: string; txFee: string }> {\n    const result = await this.doRequest({\n      method: 'bcn_estimateRawTx',\n      params: [tx.toHex(true)],\n    });\n\n    return result;\n  }\n\n  public async blockAt(num: number): Promise<JsonBlock> {\n    const result = await this.doRequest({\n      method: 'bcn_blockAt',\n      params: [num],\n    });\n\n    return result;\n  }\n\n  public async block(hash: string): Promise<JsonBlock> {\n    const result = await this.doRequest({\n      method: 'bcn_block',\n      params: [hash],\n    });\n\n    return result;\n  }\n\n  public async lastBlock(): Promise<JsonBlock> {\n    const result = await this.doRequest({\n      method: 'bcn_lastBlock',\n      params: [],\n    });\n\n    return result;\n  }\n\n  public async transaction(hash: string): Promise<JsonTransaction> {\n    const result = await this.doRequest({\n      method: 'bcn_transaction',\n      params: [hash],\n    });\n\n    return result;\n  }\n\n  public async receipt(hash: string): Promise<JsonReceipt> {\n    const result = await this.doRequest({\n      method: 'bcn_txReceipt',\n      params: [hash],\n    });\n\n    return result;\n  }\n\n  public async feePerGas(): Promise<string> {\n    const result = await this.doRequest({\n      method: 'bcn_feePerGas',\n      params: [],\n    });\n\n    return result;\n  }\n}\n","import type {\n  ContractArgument,\n  ContractArgumentFormat,\n  JsonIterateMap,\n} from '../models';\nimport type { AxiosInstance } from 'axios';\nimport { createAxiosInstance } from './utils';\nimport { BaseProvider } from './provider';\n\nexport class ContractProvider extends BaseProvider {\n  static create(url: string, apiKey: string) {\n    return new ContractProvider(createAxiosInstance(url, apiKey));\n  }\n\n  constructor(httpProvider: AxiosInstance) {\n    super(httpProvider);\n  }\n\n  public async readData(\n    address: string,\n    key: string,\n    format: ContractArgumentFormat,\n  ): Promise<string> {\n    const result = await this.doRequest({\n      method: 'contract_readData',\n      params: [address, key, format],\n    });\n\n    return result;\n  }\n\n  public async readonlyCall(\n    address: string,\n    method: string,\n    format: ContractArgumentFormat,\n    args: ContractArgument[],\n  ): Promise<string> {\n    const result = await this.doRequest({\n      method: 'contract_readonlyCall',\n      params: [{ contract: address, method, format, args }],\n    });\n\n    return result;\n  }\n\n  public async readMap(\n    address: string,\n    mapName: string,\n    key: string,\n    format: ContractArgumentFormat,\n  ): Promise<string> {\n    const result = await this.doRequest({\n      method: 'contract_readMap',\n      params: [address, mapName, key, format],\n    });\n\n    return result;\n  }\n\n  public async iterateMap(\n    address: string,\n    mapName: string,\n    keyFormat: ContractArgumentFormat,\n    valueFormat: ContractArgumentFormat,\n    limit = 10,\n    continuationToken = '0x',\n  ): Promise<JsonIterateMap> {\n    const result = await this.doRequest({\n      method: 'contract_iterateMap',\n      params: [\n        address,\n        mapName,\n        continuationToken,\n        keyFormat,\n        valueFormat,\n        limit,\n      ],\n    });\n\n    return result;\n  }\n}\n","import type { AxiosInstance } from 'axios';\nimport { createAxiosInstance } from './utils';\nimport { BaseProvider } from './provider';\nimport type { JsonBalance, JsonEpoch, JsonIdentity } from '../models';\n\nexport class DnaProvider extends BaseProvider {\n  static create(url: string, apiKey: string) {\n    return new DnaProvider(createAxiosInstance(url, apiKey));\n  }\n\n  constructor(httpProvider: AxiosInstance) {\n    super(httpProvider);\n  }\n\n  public async balance(address: string): Promise<JsonBalance> {\n    const result = await this.doRequest({\n      method: 'dna_getBalance',\n      params: [address],\n    });\n\n    return result;\n  }\n\n  public async identity(address?: string): Promise<JsonIdentity> {\n    const result = await this.doRequest({\n      method: 'dna_identity',\n      params: address ? [address] : [],\n    });\n\n    return result;\n  }\n\n  public async epoch(): Promise<JsonEpoch> {\n    const result = await this.doRequest({\n      method: 'dna_epoch',\n      params: [],\n    });\n\n    return result;\n  }\n}\n","import type { AxiosInstance } from 'axios';\nimport { BcnProvider } from './bcnProvider';\nimport { ContractProvider } from './contractProvider';\nimport { DnaProvider } from './dnaProvider';\nimport { BaseProvider } from './provider';\nimport { createAxiosInstance } from './utils';\n\nexport class IdenaProvider extends BaseProvider {\n  private _bcnProvider: BcnProvider;\n  private _contractProvider: ContractProvider;\n  private _dnaProvider: DnaProvider;\n\n  public get Blockchain(): BcnProvider {\n    return this._bcnProvider;\n  }\n\n  public get Contract(): ContractProvider {\n    return this._contractProvider;\n  }\n\n  public get Dna(): DnaProvider {\n    return this._dnaProvider;\n  }\n\n  static create(url: string, apiKey: string): IdenaProvider {\n    return new IdenaProvider(createAxiosInstance(url, apiKey));\n  }\n\n  constructor(httpProvider: AxiosInstance) {\n    super(httpProvider);\n    this._bcnProvider = new BcnProvider(httpProvider);\n    this._contractProvider = new ContractProvider(httpProvider);\n    this._dnaProvider = new DnaProvider(httpProvider);\n  }\n}\n","import { ProtoCallContractAttachment } from '../../../proto/models';\nimport type { ContractArgument, ContractArgumentFormat } from './types';\nimport { argumentsFromBytes, argumentsToBytes } from './utils';\n\nexport class CallContractAttachment {\n  private _method: string;\n  private _args: Uint8Array[];\n\n  constructor(init?: Partial<{ method: string; args: Uint8Array[] }>) {\n    this._method = init?.method || '';\n    this._args = init?.args || [];\n  }\n\n  public set method(method: string) {\n    this._method = method;\n  }\n\n  public get method(): string {\n    return this._method;\n  }\n\n  public set args(args: Uint8Array[]) {\n    this._args = args;\n  }\n\n  public get args(): Uint8Array[] {\n    return this._args;\n  }\n\n  public getArgs(formats: ContractArgumentFormat[]): ContractArgument[] {\n    return argumentsFromBytes(formats, this._args);\n  }\n\n  public setArgs(args: ContractArgument[]) {\n    this._args = argumentsToBytes(args);\n    return this;\n  }\n\n  public fromBytes(bytes: Uint8Array) {\n    const protoAttachment = ProtoCallContractAttachment.decode(bytes);\n\n    this._method = protoAttachment.method;\n    this._args = protoAttachment.args;\n\n    return this;\n  }\n\n  public toBytes() {\n    const attachment = ProtoCallContractAttachment.fromPartial({\n      method: this._method,\n      args: this._args.map((x) => x || new Uint8Array()),\n    });\n    return ProtoCallContractAttachment.encode(attachment).finish();\n  }\n}\n","import { ProtoDeployContractAttachment } from '../../../proto/models';\nimport { argumentsFromBytes, argumentsToBytes } from './utils';\nimport type {\n  ContractArgumentFormat,\n  ContractArgument,\n  EmbeddedContractType,\n} from './types';\n\nexport class DeployContractAttachment {\n  private _codeHash: EmbeddedContractType;\n  private _args: Uint8Array[];\n\n  constructor(\n    init?: Partial<{ codeHash: EmbeddedContractType; args: Uint8Array[] }>,\n  ) {\n    this._codeHash = init?.codeHash || 0;\n    this._args = init?.args || [];\n  }\n\n  public set codeHash(codeHash: number) {\n    this._codeHash = codeHash;\n  }\n\n  public get codeHash(): number {\n    return this._codeHash;\n  }\n\n  public set args(args: Uint8Array[]) {\n    this._args = args;\n  }\n\n  public get args(): Uint8Array[] {\n    return this._args;\n  }\n\n  public getArgs(formats: ContractArgumentFormat[]): ContractArgument[] {\n    return argumentsFromBytes(formats, this._args);\n  }\n\n  public setArgs(args: ContractArgument[]) {\n    this._args = argumentsToBytes(args);\n  }\n\n  public fromBytes(bytes: Uint8Array) {\n    const protoAttachment = ProtoDeployContractAttachment.decode(bytes);\n\n    this._codeHash = protoAttachment.CodeHash[0] || 0;\n    this._args = protoAttachment.args;\n\n    return this;\n  }\n\n  public toBytes() {\n    const attachment = ProtoDeployContractAttachment.fromPartial({\n      CodeHash: new Uint8Array([this._codeHash]),\n      args: this._args.map((x) => x || new Uint8Array()),\n    });\n    return ProtoDeployContractAttachment.encode(attachment).finish();\n  }\n}\n","export class JsonBlock {\n  constructor(\n    public coinbase: string,\n    public hash: string,\n    public parentHash: string,\n    public height: number,\n    public root: string,\n    public identityRoot: string,\n    public ipfsCid: string,\n    public transactions: string[],\n    public flags: string[],\n    public isEmpty: boolean,\n    public offlineAddress: string,\n  ) {}\n}\n\nexport class JsonTransaction {\n  constructor(\n    public hash: string,\n    public type: string,\n    public from: string,\n    public to: string,\n    public amount: string,\n    public tips: string,\n    public maxFee: string,\n    public nonce: number,\n    public epoch: number,\n    public payload: string,\n    public blockHash: string,\n    public usedFee: string,\n    public timestamp: number,\n  ) {}\n}\n\nexport class JsonReceipt {\n  constructor(\n    public contract: string,\n    public method: string,\n    public success: boolean,\n    public gasUsed: number,\n    public txHash: string,\n    public error: string,\n    public gasCost: string,\n    public txFee: number,\n  ) {}\n}\n\nexport class JsonBalance {\n  constructor(\n    public stake: string,\n    public balance: string,\n    public nonce: number,\n    public mempoolNonce: number,\n  ) {}\n}\n\nclass JsonFlipWords {\n  constructor(\n    public words: number[],\n    public used: boolean,\n    public id: number,\n  ) {}\n}\n\nclass JsonTxAddr {\n  constructor(public TxHash: string, public Address: string) {}\n}\n\nclass JsonInviter {\n  constructor(\n    public txHash: string,\n    public address: string,\n    public epochHeight: number,\n  ) {}\n}\n\nexport class JsonIdentity {\n  constructor(\n    public address: string,\n    public profileHash: string,\n    public stake: string,\n    public invites: number,\n    public age: number,\n    public state: string,\n    public pubkey: string,\n    public requiredFlips: number,\n    public availableFlips: number,\n    public flipKeyWordPairs: JsonFlipWords[],\n    public madeFlips: number,\n    public totalQualifiedFlips: number,\n    public totalShortFlipPoints: number,\n    public flips: string[],\n    public online: boolean,\n    public generation: number,\n    public code: string,\n    public invitees: JsonTxAddr[],\n    public penalty: string,\n    public lastValidationFlags: string[],\n    public delegatee: string,\n    public delegationEpoch: number,\n    public delegationNonce: number,\n    public isPool: boolean,\n    public inviter: JsonInviter,\n    public shardId: number,\n  ) {}\n}\n\nexport class JsonEpoch {\n  constructor(\n    public startBlock: number,\n    public epoch: number,\n    public nextValidation: string,\n    public currentPeriod: string,\n  ) {}\n}\n\nexport class JsonIterateMapItem {\n  constructor(public key: string, public value: string) {}\n}\nexport class JsonIterateMap {\n  constructor(\n    public items: JsonIterateMapItem[],\n    public continuationToken: string,\n  ) {}\n}\n","import { ProtoTerminateContractAttachment } from '../../../proto/models';\nimport type { ContractArgument, ContractArgumentFormat } from './types';\nimport { argumentsFromBytes, argumentsToBytes } from './utils';\n\nexport class TerminateContractAttachment {\n  private _args: Uint8Array[];\n\n  constructor(init?: Partial<{ args: Uint8Array[] }>) {\n    this._args = init?.args || [];\n  }\n\n  public set args(args: Uint8Array[]) {\n    this._args = args;\n  }\n\n  public get args(): Uint8Array[] {\n    return this._args;\n  }\n\n  public getArgs(formats: ContractArgumentFormat[]): ContractArgument[] {\n    return argumentsFromBytes(formats, this._args);\n  }\n\n  public setArgs(args: ContractArgument[]) {\n    this._args = argumentsToBytes(args);\n  }\n\n  public fromBytes(bytes: Uint8Array) {\n    const protoAttachment = ProtoTerminateContractAttachment.decode(bytes);\n\n    this._args = protoAttachment.args;\n\n    return this;\n  }\n\n  public toBytes() {\n    const attachment = ProtoTerminateContractAttachment.fromPartial({\n      args: this._args.map((x) => x || new Uint8Array()),\n    });\n    return ProtoTerminateContractAttachment.encode(attachment).finish();\n  }\n}\n"],"names":["createBaseProtoTransaction","data","undefined","signature","Uint8Array","useRlp","ProtoTransaction","encode","message","writer","_m0","Writer","create","ProtoTransaction_Data","uint32","fork","ldelim","length","bytes","bool","decode","input","reader","Reader","end","len","pos","tag","skipType","fromPartial","object","_a","_b","createBaseProtoTransaction_Data","nonce","epoch","type","to","amount","maxFee","tips","payload","_c","_d","_e","_f","_g","_h","createBaseProtoDeployContractAttachment","CodeHash","args","ProtoDeployContractAttachment","v","push","map","e","ProtoCallContractAttachment","method","string","ProtoTerminateContractAttachment","createBaseProtoStoreToIpfsAttachment","cid","size","ProtoStoreToIpfsAttachment","util","Long","configure","Decimal__default","set","toExpPos","DNA_BASE","stripHexPrefix","str","slice","isHexPrefixed","hexToUint8Array","hexString","arrayBuffer","i","byteValue","parseInt","substring","toHexString","byteArray","withPrefix","Array","from","byte","toString","join","floatStringToDna","value","decimalValue","Decimal","mul","BN","dnaToFloatString","bn","div","EmbeddedContractType","ContractArgumentFormat","TransactionType","argumentFromBytes","format","index","Byte","Int8","res","Buffer","readBigUint64LE","Uint64","readBigInt64LE","Int64","out","c","c1","String","fromCharCode","c2","u","c3","utf8ByteArrayToString","Bigint","Hex","Dna","Default","argumentsFromBytes","formats","idx","argumentToBytes","val","Error","isNeg","buf","alloc","writeBigUint64LE","BigInt","writeBigInt64LE","p","charCodeAt","stringToUtf8ByteArray","toArray","argumentsToBytes","maxIndex","Math","max","x","result","fill","forEach","element","exports","getKeyArray","key","publicKeyToAddress","publicKey","sha3","keccak_256","array","sender","hash","secp256k1","ecdsaRecover","Number","sign","recid","ecdsaSign","StoreToIpfsAttachment","constructor","init","this","_size","_cid","fromBytes","protoAttachment","toBytes","attachment","finish","Transaction","_nonce","_epoch","_type","_to","_amount","_maxFee","_tips","_payload","_signature","_createProtoTxData","gas","DeleteFlipTx","StoreToIpfsTx","maxSize","static","hex","fromHex","protoTx","protoTxData","fromJson","jsonTx","SendTx","stringType","toUpperCase","Object","entries","find","getTxType","tx","toHex","isZero","createAxiosInstance","url","apiKey","axios","baseURL","interceptors","request","use","config","BaseProvider","httpProvider","_httpProvider","doRequest","obj","id","post","error","isAxiosError","response","BcnProvider","super","buildTx","params","useProto","sendTx","estimateTx","blockAt","num","block","lastBlock","transaction","receipt","feePerGas","ContractProvider","readData","address","readonlyCall","contract","readMap","mapName","iterateMap","keyFormat","valueFormat","limit","continuationToken","DnaProvider","balance","identity","IdenaProvider","_bcnProvider","_contractProvider","_dnaProvider","Blockchain","Contract","_method","_args","getArgs","setArgs","_codeHash","codeHash","stake","mempoolNonce","coinbase","parentHash","height","root","identityRoot","ipfsCid","transactions","flags","isEmpty","offlineAddress","startBlock","nextValidation","currentPeriod","profileHash","invites","age","state","pubkey","requiredFlips","availableFlips","flipKeyWordPairs","madeFlips","totalQualifiedFlips","totalShortFlipPoints","flips","online","generation","code","invitees","penalty","lastValidationFlags","delegatee","delegationEpoch","delegationNonce","isPool","inviter","shardId","items","success","gasUsed","txHash","gasCost","txFee","blockHash","usedFee","timestamp","publicKeyCreate"],"mappings":"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"}